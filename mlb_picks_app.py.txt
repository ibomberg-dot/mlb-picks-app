import streamlit as st
import requests
from bs4 import BeautifulSoup
import datetime

# Get today's date in YYYY-MM-DD
today = datetime.datetime.now().strftime("%Y-%m-%d")

st.title("MLB Picks Tracker - Action Network")

if st.button("Fetch and Compare Today's Picks"):
    st.info("Fetching picks from Action Network...")

    # STEP 1: Scrape today's MLB picks from Action Network
    url = "https://www.actionnetwork.com/mlb/picks"
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        st.error("Failed to load picks from Action Network.")
    else:
        soup = BeautifulSoup(response.text, "html.parser")

        # Container for storing picks
        picks = []

        # Find prediction articles
        articles = soup.find_all("a", class_="inline-flex")  # Class may change over time

        for article in articles:
            link = "https://www.actionnetwork.com" + article["href"]
            title = article.get_text(strip=True)
            # Simple title parse — works for many articles like "Author: Pick for Game"
            try:
                prediction_response = requests.get(link, headers=headers)
                prediction_soup = BeautifulSoup(prediction_response.text, "html.parser")
                author = prediction_soup.find("span", class_="text-xs font-medium").text.strip()
                pick_text = prediction_soup.find("h1").text.strip()
                picks.append({
                    "Author": author,
                    "Title": title,
                    "Pick": pick_text,
                    "Link": link
                })
            except Exception as e:
                continue  # Skip problematic articles

        if not picks:
            st.warning("No picks found.")
        else:
            st.success(f"Found {len(picks)} picks.")
            st.write("Today's Picks:")
            st.table(picks)

            st.info("Now comparing to actual results...")

            # STEP 2: Pull scores from ESPN (as MLB.com is more complex)
            scores_url = "https://www.espn.com/mlb/scoreboard"
            scores_response = requests.get(scores_url, headers=headers)
            scores_soup = BeautifulSoup(scores_response.text, "html.parser")

            score_blocks = scores_soup.find_all("article", class_="scoreboard")

            results = []
            for game in score_blocks:
                try:
                    teams = game.find_all("span", class_="sb-team-short")
                    scores = game.find_all("span", class_="sb-team-score")
                    if len(teams) == 2 and len(scores) == 2:
                        team1 = teams[0].text.strip()
                        team2 = teams[1].text.strip()
                        score1 = int(scores[0].text.strip())
                        score2 = int(scores[1].text.strip())
                        results.append({
                            "Matchup": f"{team1} vs {team2}",
                            "Winner": team1 if score1 > score2 else team2,
                            "Score": f"{score1}-{score2}",
                            "Total": score1 + score2
                        })
                except:
                    continue

            # STEP 3: Match picks to outcomes — simple string matching
            for pick in picks:
                matched = False
                for result in results:
                    if result["Matchup"].lower() in pick["Pick"].lower():
                        pick["Result"] = result["Score"]
                        pick["Winner"] = result["Winner"]
                        pick["Total"] = result["Total"]
                        # Determine Win/Loss — simplistic
                        if result["Winner"] in pick["Pick"]:
                            pick["Outcome"] = "Win"
                        elif "under" in pick["Pick"].lower() and result["Total"] < 8:
                            pick["Outcome"] = "Win"
                        elif "over" in pick["Pick"].lower() and result["Total"] > 8:
                            pick["Outcome"] = "Win"
                        else:
                            pick["Outcome"] = "Loss"
                        matched = True
                        break
                if not matched:
                    pick["Outcome"] = "N/A"

            st.subheader("Results Comparison")
            st.table(picks)
